/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package representation.planner;

import business.maintenanceactivity.Appointment;
import business.maintenanceactivity.MaintenanceActivity;
import business.user.Maintainer;
import business.user.WeekConverter;
import java.awt.Color;
import java.awt.Dimension;
import java.time.LocalDate;
import java.time.LocalDateTime;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author gorra
 */
public class ActivityAssignment extends javax.swing.JFrame {
    private MaintenanceActivity activity;
    private LocalDate newDate;
    private Maintainer maintainer;
    private DefaultTableModel tableModel;

    /**
     * Creates new form ActivityAssign
     */
    public ActivityAssignment(MaintenanceActivity activity, LocalDate newDate, Maintainer mantainer) {
        this.activity = activity;
        this.newDate = newDate;
        this.maintainer = mantainer;
        initComponents();
        tableModel = (DefaultTableModel) maintainerAvailabilityDayTable.getModel();
        MinuteCellRenderer renderer = new MinuteCellRenderer();
        maintainerAvailabilityDayTable.setDefaultRenderer(Object.class, renderer);
        initializeFields();
    }

    
    private void initializeFields(){
        int weekNumber = WeekConverter.getWeek(newDate);
        weekLabel.setText(Integer.toString(weekNumber));
        dayLabel.setText(newDate.getDayOfWeek().name());
        dayLabelNumber.setText(String.valueOf(newDate.getDayOfMonth()));
        maintainerLabel.setText("Availability " + maintainer.getUsername());
        activityInfoLabel.setText(Integer.toString(activity.getActivityId())+" - "+activity.getSite().getArea()
                +" - "+activity.getTypology()+" - "+ Integer.toString(activity.getEstimatedInterventionTime())+"'");
        workspaceNotesTextArea.setText(activity.getSite().getWorkSpaceNotes());
        populateTable(weekNumber);
    }
    
    private void populateTable(int weekNumber){
        int numProcedureSkill = activity.getMaintenanceProcedure().getSkills().size();
        String[] rowTable = new String[] {"", "", "60 min", "60 min", "60 min", "60 min", "60 min", "60 min", "60 min"};
        rowTable[0] = maintainer.getUsername();
        maintainer.getSkills().retainAll(activity.getMaintenanceProcedure().getSkills());
        rowTable[1] =  maintainer.getSkills().size() + "/" + numProcedureSkill;
        for(Appointment appointment: maintainer.getAppointmentsInWeek()){
            LocalDateTime dateTime = appointment.getStartDateAndTime();
            if(dateTime.toLocalDate().equals(newDate)){
                switch(dateTime.getHour()){
                    case 8:
                        rowTable[2] = String.valueOf(Integer.valueOf(rowTable[2].split(" ")[0]) - appointment.getDuration()) + " min";
                        break;
                    case 9:
                        rowTable[3] = String.valueOf(Integer.valueOf(rowTable[3].split(" ")[0]) - appointment.getDuration()) + " min";
                        break;
                    case 10:
                        rowTable[4] = String.valueOf(Integer.valueOf(rowTable[4].split(" ")[0]) - appointment.getDuration()) + " min";
                        break;
                    case 11:
                        rowTable[5] = String.valueOf(Integer.valueOf(rowTable[5].split(" ")[0]) - appointment.getDuration()) + " min";
                        break;
                    case 14:
                        rowTable[6] = String.valueOf(Integer.valueOf(rowTable[6].split(" ")[0]) - appointment.getDuration()) + " min";
                        break;
                    case 15:
                        rowTable[7] = String.valueOf(Integer.valueOf(rowTable[7].split(" ")[0]) - appointment.getDuration()) + " min";
                        break;
                    case 16:
                        rowTable[8] = String.valueOf(Integer.valueOf(rowTable[8].split(" ")[0]) - appointment.getDuration()) + " min";
                        break;
                }                        
            }                    
        }
        System.out.println(rowTable.toString());
        tableModel.addRow(rowTable);           
    }
    
    
    private void errorMessage(String message){
        JOptionPane.showMessageDialog(this, message, "ERRORE", JOptionPane.ERROR_MESSAGE);
    }
    
    private void infoMessage(String message){
        JOptionPane.showMessageDialog(this, message, "INFO", JOptionPane.INFORMATION_MESSAGE);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        maintainerLabel = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        workspaceNotesTextArea = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        maintainerAvailabilityDayTable = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        activityInfoLabel = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        weekLabel = new javax.swing.JLabel();
        dayLabel = new javax.swing.JLabel();
        dayLabelNumber = new javax.swing.JLabel();
        availabilityLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 153, 0));
        jPanel1.setForeground(new java.awt.Color(255, 153, 0));

        maintainerLabel.setBackground(new java.awt.Color(200, 153, 0));
        maintainerLabel.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        maintainerLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        maintainerLabel.setOpaque(true);

        jLabel2.setBackground(new java.awt.Color(200, 153, 0));
        jLabel2.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Workspace Notes");
        jLabel2.setOpaque(true);

        workspaceNotesTextArea.setEditable(false);
        workspaceNotesTextArea.setColumns(20);
        workspaceNotesTextArea.setRows(5);
        jScrollPane1.setViewportView(workspaceNotesTextArea);

        maintainerAvailabilityDayTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Maintainer", "Skills", "<html>Availab<br><font size=\"1\">8:00 - 9:00</font></html>", "<html>Availab<br><font size=\"1\">9:00 - 10:00</font></html>", "<html>Availab<br><font size=\"1\">10:00 - 11:00</font></html>", "<html>Availab<br><font size=\"1\">11:00 - 12:00</font></html>", "<html>Availab<br><font size=\"1\">14:00 - 15:00</font></html>", "<html>Availab<br><font size=\"1\">15:00 - 16:00</font></html>", "<html>Availab<br><font size=\"1\">16:00 - 17:00</font></html>"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        maintainerAvailabilityDayTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(maintainerAvailabilityDayTable);
        int width = maintainerAvailabilityDayTable.getSize().width;
        maintainerAvailabilityDayTable.setFillsViewportHeight(true);
        maintainerAvailabilityDayTable.getTableHeader().setPreferredSize(new Dimension(width,40));
        maintainerAvailabilityDayTable.setRowHeight(35);
        maintainerAvailabilityDayTable.setBackground(new Color(255,153,0));
        maintainerAvailabilityDayTable.getTableHeader().setBackground(new Color(255,170,0));

        jLabel3.setBackground(new java.awt.Color(250, 250, 250));
        jLabel3.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("<html>Activity to<br>assign<html>");
        jLabel3.setOpaque(true);

        activityInfoLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        activityInfoLabel.setOpaque(true);

        jLabel5.setBackground(new java.awt.Color(250, 250, 250));
        jLabel5.setFont(new java.awt.Font("Dialog", 0, 20)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Week nÂ°");
        jLabel5.setOpaque(true);

        weekLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        weekLabel.setOpaque(true);

        dayLabel.setBackground(new java.awt.Color(250, 250, 250));
        dayLabel.setFont(new java.awt.Font("Dialog", 0, 20)); // NOI18N
        dayLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        dayLabel.setOpaque(true);

        dayLabelNumber.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        dayLabelNumber.setOpaque(true);

        availabilityLabel.setBackground(new java.awt.Color(250, 250, 250));
        availabilityLabel.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        availabilityLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        availabilityLabel.setOpaque(true);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 231, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(29, 29, 29)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(maintainerLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(76, 76, 76))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 576, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(availabilityLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(weekLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(dayLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(dayLabelNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(33, 33, 33)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(activityInfoLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(25, 25, 25))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(activityInfoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(weekLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(dayLabelNumber, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(dayLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(maintainerLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(availabilityLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(23, 23, 23)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 224, Short.MAX_VALUE)
                        .addGap(27, 27, 27))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(ActivityAssignment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(ActivityAssignment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(ActivityAssignment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(ActivityAssignment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new ActivityAssignment().setVisible(true);
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel activityInfoLabel;
    private javax.swing.JLabel availabilityLabel;
    private javax.swing.JLabel dayLabel;
    private javax.swing.JLabel dayLabelNumber;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable maintainerAvailabilityDayTable;
    private javax.swing.JLabel maintainerLabel;
    private javax.swing.JLabel weekLabel;
    private javax.swing.JTextArea workspaceNotesTextArea;
    // End of variables declaration//GEN-END:variables
}
